var data = {lines:[
{"lineNum":"    1","line":"/*"},
{"lineNum":"    2","line":"When sending SMS messages, all characters can be represented using ASCII encoding,"},
{"lineNum":"    3","line":"which contains 127 characters, that can be represented using 7 bits (2^7 = 128)."},
{"lineNum":"    4","line":"Now given an array of variables encoded using ASCII code, stored in UINT8_t,"},
{"lineNum":"    5","line":"they can be packed into a byte buffer OUTPUT in the following format:"},
{"lineNum":"    6","line":""},
{"lineNum":"    7","line":"uint8_t *input, *output;"},
{"lineNum":"    8","line":""},
{"lineNum":"    9","line":"input[0] = 0x34 =>   0 0110100"},
{"lineNum":"   10","line":"input[1] = 0x55 =>   0  101010 1"},
{"lineNum":"   11","line":"input[2] = 0x7C =>   0   11111 01"},
{"lineNum":"   12","line":"input[3] = 0x42 =>   0    1000 010"},
{"lineNum":"   13","line":"input[4] = 0x54 =>   0     101 0100"},
{"lineNum":"   14","line":""},
{"lineNum":"   15","line":"output[0] =   1 0110100  : lower 7 bits from input[0]’s bit 0-6, bit    7 comes from input[1]’s bit 0"},
{"lineNum":"   16","line":"output[1] =   01 101010  : lower 6 bits from input[1]’s bit 1-6, bits 6-7 come  from input[2]’s bit 0-1"},
{"lineNum":"   17","line":"output[2] =   010 11111  : lower 5 bits from input[2]’s bit 2-6, bits 5-7 come  from input[3]’s bit 0-2"},
{"lineNum":"   18","line":"output[3] =   0010 1000  : lower 4 bits from input[3]’s bit 3-6, bits 4-7 come  from input[4]’s but 0-3"},
{"lineNum":"   19","line":""},
{"lineNum":"   20","line":""},
{"lineNum":"   21","line":"Now, given an a byte buffer that contains packed 7bits ASCII code, print out value of each 7 BIT variable:"},
{"lineNum":"   22","line":""},
{"lineNum":"   23","line":"void decode_print(uint8_t* data, int data_len)"},
{"lineNum":"   24","line":""},
{"lineNum":"   25","line":"*/"},
{"lineNum":"   26","line":""},
{"lineNum":"   27","line":"#include <stdio.h>"},
{"lineNum":"   28","line":"#include <stdlib.h>"},
{"lineNum":"   29","line":"typedef char uint8_t;"},
{"lineNum":"   30","line":""},
{"lineNum":"   31","line":"/* get lower n bits */"},
{"lineNum":"   32","line":"#define LSB(k, n) ((k) & ((1 << (n)) - 1))"},
{"lineNum":"   33","line":"/* get higher n bits */"},
{"lineNum":"   34","line":"#define MSB(k, n) LSB((k) >> (8 - (n)), n)"},
{"lineNum":"   35","line":""},
{"lineNum":"   36","line":""},
{"lineNum":"   37","line":"    /*"},
{"lineNum":"   38","line":""},
{"lineNum":"   39","line":"    input[0] = 0x34 =>   0   0110100 nil ----------->"},
{"lineNum":"   40","line":"    input[1] = 0x55 =>   0    101010 1   -----------> output[0] =        1 0110100   =>   0xb4"},
{"lineNum":"   41","line":"    input[2] = 0x7d =>   0     11111 01  -----------> output[1] =       01 101010    =>   0x6a"},
{"lineNum":"   42","line":"    input[3] = 0x42 =>   0      1000 010 -----------> output[2] =      010 11111     =>   0x5f"},
{"lineNum":"   43","line":"    input[4] = 0x54 =>   0       101 0100 ----------> output[3] =     0100 1000      =>   0x48"},
{"lineNum":"   44","line":"    input[5] = 0x48 =>   0        10 01000 ---------> output[4] =    01000 101       =>   0x45"},
{"lineNum":"   45","line":"    input[6] = 0x50 =>   0         1 010000 --------> output[5] =   010000 10        =>   0x42"},
{"lineNum":"   46","line":"    input[7] = 0x20 =>   0       nil 0100000 -------> output[6] =  0100000 1         =>   0x41"},
{"lineNum":"   47","line":"    input[8] = 0x44      0   1000100 nil -----------> output[7] = nil      nil       =>   0x0"},
{"lineNum":"   48","line":""},
{"lineNum":"   49","line":"    */"},
{"lineNum":"   50","line":""},
{"lineNum":"   51","line":"void decode_print(uint8_t* data, int data_len)"},
{"lineNum":"   52","line":"{","class":"lineCov","hits":"1","possible_hits":"1",},
{"lineNum":"   53","line":"    uint8_t i, h, l;"},
{"lineNum":"   54","line":"    uint8_t temp;"},
{"lineNum":"   55","line":"    for (i = 0; i < data_len; i ++) {","class":"lineCov","hits":"2","possible_hits":"2",},
{"lineNum":"   56","line":"        h = i % 8;    // get higher h bits of data[i-1]","class":"lineCov","hits":"1","possible_hits":"1",},
{"lineNum":"   57","line":"        l = 7 - h;    // get lower  l bits of data[i]","class":"lineCov","hits":"1","possible_hits":"1",},
{"lineNum":"   58","line":""},
{"lineNum":"   59","line":""},
{"lineNum":"   60","line":"        if (i == 0) {","class":"lineCov","hits":"1","possible_hits":"1",},
{"lineNum":"   61","line":"            temp = LSB(data[i], l);","class":"lineCov","hits":"1","possible_hits":"1",},
{"lineNum":"   62","line":"        } else {"},
{"lineNum":"   63","line":"            /* the every 8th output should be zero */"},
{"lineNum":"   64","line":"            if (h == 7 && data[i] != 0) {","class":"lineCov","hits":"1","possible_hits":"1",},
{"lineNum":"   65","line":"                printf(\"output[%d] = %x, is a wrong input.\\n\", i, data[i]);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   66","line":"                exit(-1);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   67","line":"            }"},
{"lineNum":"   68","line":"            temp = (LSB(data[i], l) << h) | (MSB(data[i - 1], h));","class":"lineCov","hits":"1","possible_hits":"1",},
{"lineNum":"   69","line":"        }"},
{"lineNum":"   70","line":""},
{"lineNum":"   71","line":"        printf(\"input[%d] = 0x%x\\n\", i, temp);","class":"lineCov","hits":"1","possible_hits":"1",},
{"lineNum":"   72","line":"    }"},
{"lineNum":"   73","line":"}","class":"lineCov","hits":"1","possible_hits":"1",},
{"lineNum":"   74","line":""},
{"lineNum":"   75","line":"int main()"},
{"lineNum":"   76","line":"{","class":"lineCov","hits":"2","possible_hits":"2",},
{"lineNum":"   77","line":"    uint8_t decoded[8] = {","class":"lineCov","hits":"1","possible_hits":"1",},
{"lineNum":"   78","line":"     0xb4, 0x6a, 0x5f, 0x48,"},
{"lineNum":"   79","line":"     0x45, 0x42, 0x41, 0x0"},
{"lineNum":"   80","line":"    };"},
{"lineNum":"   81","line":""},
{"lineNum":"   82","line":"    decode_print(decoded, 8);","class":"lineCov","hits":"1","possible_hits":"1",},
{"lineNum":"   83","line":"    return 0;","class":"lineCov","hits":"1","possible_hits":"1",},
{"lineNum":"   84","line":"}","class":"linePartCov","hits":"1","possible_hits":"2",},
{"lineNum":"   85","line":""},
]};
var percent_low = 25;var percent_high = 75;
var header = { "command" : "sms.out", "date" : "2017-01-20 11:49:59", "instrumented" : 17, "covered" : 15,};
var merged_data = [];
